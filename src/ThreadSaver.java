/*
File: ThreadSaver.java
Author: Ethan J. Nephew
Date due: March 28, 2021
Course: CEN-3024C
Description: ThreadSaver object that is used to assign variables to a thread and save information that is generated by a thread.
*/

/***
 * Class definition that assigns a range, name, array, and saves the sum of the specified range of the array.
 */
public class ThreadSaver {

    private double lower, upper; // thread lower and upper bounds/range, decimal
    private String name; // thread name
    private int[] intArray;
    private long begin, end; // begin and end times
    private int arraySum; // The sum of the array contents that were specified by the bounds/range.
    private boolean isRunning = true;

    /***
     * Default constructor for testing purposes.
     */
    public ThreadSaver(){
        // default constructor for testing purposes
    }

    /***
     * Constructor for a ThreadSaver object.
     * @param lower Lower bound of the range, between 0-1 and less than Upper.
     * @param upper Upper bound of the range, between 0-1 and greater than Lower.
     * @param name Name of the ThreadSaver, for example: "Quarter1".
     * @param intArray It requires the array.
     */
    public ThreadSaver(double lower, double upper, String name, int[] intArray) {
        this.intArray = intArray;
        this.setLower(lower);
        this.setUpper(upper);
        this.name = name;
        // this.begin = System.nanoTime(); // Is this when the thread begins?
    }

    /***
     * This method returns the value of the isRunning boolean.
     * @return This returns a boolean value of whether or not the thread is still running.
     */
    public boolean getIsRunning() {
        return isRunning;
    }

    /***
     * This method is how the thread running state can be changed.
     * @param running Requires a boolean parameter (true/false).
     */
    public void setRunning(boolean running) {
        isRunning = running;
    }

    /***
     * This returns the lower bound value.
     * @return This returns the lower bound value.
     */
    public double getLower() {
        return lower;
    }

    /***
     * This sets the lower bound value. The parameter must be between 0-1.
     * @param lower Requires a parameter between 0-1.
     */
    public void setLower(double lower) {
        this.lower = (int)(intArray.length * lower);
    }

    /***
     * This returns the upper bound.
     * @return This returns the upper bound.
     */
    public double getUpper() {
        return upper;
    }

    /***
     * This sets the upper bound value. The parameter must be between 0-1.
     * @param upper Requires a parameter between 0-1.
     */
    public void setUpper(double upper) {
        this.upper = (int)(intArray.length * upper);
    }

    /***
     *  Getter method for the name.
     * @return Returns the name.
     */
    public String getName() {
        return name;
    }

    /***
     * Setter method for the name.
     * @param name Requires a string that will be assigned as the name.
     */
    public void setName(String name) {
        this.name = name;
    }

    /***
     * Getter method for the array.
     * @return Return the array.
     */
    public int[] getIntArray() {
        return intArray;
    }

    /***
     * This assigns an int[] array to the ThreadSaver object.
     * @param intArray Requires an int[] array that will be assigned as the array.
     */
    public void setIntArray(int[] intArray) {
        this.intArray = intArray;
    }

    /***
     * Getter method for the begin time.
     * @return Returns the time that the thread began.
     */
    public long getBegin() {
        return begin;
    }

    /***
     * Setter method for the begin time.
     * @param begin Sets the begin time.
     */
    public void setBegin(long begin) {
        this.begin = begin;
    }

    /***
     * Getter method for the end time.
     * @return Returns the time that the thread ended.
     */
    public long getEnd() {
        return end;
    }

    /***
     * Setter method for the end time.
     * @param end Sets the end time.
     */
    public void setEnd(long end) {
        this.end = end;
    }

    /***
     * Gets the array sum.
     * @return Returns the sum of the array.
     */
    public int getArraySum() {
        return arraySum;
    }

    /***
     * Sets the array sum.
     * @param arraySum This sets the sum of the array.
     */
    public void setArraySum(int arraySum) {
        this.arraySum = arraySum;
    }

}
